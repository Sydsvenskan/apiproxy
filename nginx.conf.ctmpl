worker_processes  1;  ## Default: 1
worker_rlimit_nofile 8192;
user  nginx;
daemon off;

events {
  worker_connections  4096;  ## Default: 1024
}

http {

lua_shared_dict prometheus_metrics 10M;
lua_package_path "/nginx-prometheus/?.lua";
init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "apiproxy_http_requests_total", "Number of HTTP requests", {"service", "status"})
  metric_latency = prometheus:histogram(
    "apiproxy_http_request_duration_seconds", "HTTP request latency", {"service"})
';

keepalive_requests 100000;

access_log /dev/null;

{{range services}} {{$name := .Name}} {{$service := service .Name}}
upstream api-upstream-{{$name}} {
  zone upstream-{{$name}} 64k;
  least_conn;
  keepalive 4;
  {{range $service}}server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;
  {{else}}server 127.0.0.1:65535; # force a 502{{end}}
}
{{end}}

server {
  listen 80;

  client_max_body_size 50M;

{{range services}} {{$name := .Name}} {{$service := service .Name}}
  location /service/{{$name}}/ {
    proxy_pass http://api-upstream-{{$name}}/;
    add_header  X-Upstream  $upstream_addr;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    log_by_lua '
  metric_requests:inc(1, {"{{$name}}", ngx.var.status})
  metric_latency:observe(ngx.now() - ngx.req.start_time(), {"{{$name}}"})
';
  }

  location /api/v1/{{$name}}/ {
    proxy_pass http://api-upstream-{{$name}}/;
    add_header  X-Upstream  $upstream_addr;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    log_by_lua '
  metric_requests:inc(1, {"{{$name}}", ngx.var.status})
  metric_latency:observe(ngx.now() - ngx.req.start_time(), {"{{$name}}"})
';
  }
{{end -}}

  location /healthcheck {
    {{range services}} {{$name := .Name}} {{$service := service .Name}}
    add_header x-service-{{$name}} "{{range $service}}{{.Address}}:{{.Port}} {{end}}";
    {{end}}
    return 200;
  }

  location /metrics {
    content_by_lua 'prometheus:collect()';
  }

  location / {
    return 404;
  }
}

}
